//Основные команды
git status - есть ли в папке репозитория какие-либо изменения. Дополнительно отображает состояние каждого измененного файла.
git init - создание репозитория в определенной папке.
git add <file(s)>- (добавление в индекс) отмечает текущее состояние файлов для подготовки к коммиту.
git commit - m 'comment' - сохраняет изменения в репозитории под пользовательским названием "comment".
git show - просмотр детальной информации о последнем коммите.
git log - просмотр всей истории всех коммитов в репозитории.

//Работа с удаленными репозиториями
git clone - клонирование удаленного репозитория на локальный компьютер.
git remote add origin <path> - устанавливает в настройках локального репозитория путь к удаленному.
git push -u origin master - отправляет измененнный локальный репозиторий на сервер, где "origin" - наименование удаленного репозитория, "master" - имя ветки.
git remote -v - просмотр пути удаленного репозитория, с которым связан локальный.
git remote remove origin - удаление пути удаленного репозитория из локального по имени этого пути.
git pull - затянуть изменения, внесенные ранее в удаленный репозиторий, на свой локальный.

//Командная работа в Git
git checkout -b <наименование новой ветки> - создает новую ветку, и сразу в нее переключает репозиторий.
git checkout <наименование ветки> - переключает репозиторий в указанную ветку.
git branch - отображает список имеющихся веток в репозитории.
git branch -a - отображает все ветки и локальные, и удаленные (зеленным цветом отмечены локальные, красным - удаленные).
git stash - сохраняет внесенные изменения, которые были незакомичены (также позволяет сохранять изменения, уже доабвленные в индекс).
git stash list - отображает список наборов изменений, которые были добавлены в stash.
git stash pop - возвращает обратно внесенные изменения в рабочую дирекоторию.
git stash drop N - удаляет внесенное изменение под номером N, которое больше не нужно, из общего списка stash.
git merge <наименование ветки> - сливает интересующую ветку с текущей.

//Работа с изменениями
git diff <наименование файла> - просмотр незакомиченных изменений в коде конкретного файла
git diff - просмотр незакомиченных изменений в коде всех файлов
git diff <хэш коммита> - выполняет сравнение незакомиченных изменений в коде с текущей версией файлов, т.е. с последним коммитом в текущей ветке.
git diff <хэш коммита1> <хэш коммита2> - выполняет сравнение незакомиченных изменений между двумя коммитами.
git diff <хэш коммита1> <хэш коммита2> <наименование файла> - выполняет сравнение незакомиченных изменений в указанном файле между двумя коммитами.
git diff <наименование файла1> <наименование файла2> - выполняет сравнение изменений между двумя указанными файлами, в том числе и за пределами одного репозитория.
git blame <наименование файла> - позволяет просмотреть информацию о каждой строке кода из указанного файла пристально: каким пользователем было внесено изменение, в какое время это было сделано и в рамках какого коммита.
git restore <наименование файла> - позволяет удалить незакомиченные изменения в конкретном файле.
git restore --staged <наименование файла> - позволяет убрать указанный файл из индекса.
git reset --hard - удаляет из рабочей директории все незакомиченные изменения, даже если они были добавлены в индекс.
git clean -f - удаляет все новые неотслеживаемые и незакомиченные изменения.
git rm --cached <наименование файла> - удаляет файл из отслеживания (позволяет удалить файл даже в том случае, когда он ранее комитился, затем добавлялся в .gitignore).
git checkout <хэш коммита> <наименование файла> - вернуть конкретную версию конкретного файла в рабочую директорию.
git revert <хэш коммита> - отменяет конкретный коммит.
git revert --no-commit <хэш коммита> - отменяет конкретные коммиты (если делать эту команду последовательно) и позволяет сделать единственный коммит в конце без фиксирования промежуточных после каждой такой команды.
git reset --soft <хэш коммита> - мягкий сброс коммитов до указанного коммита с отправкой внесенных в них изменений в индекс.
git reset --mixed <хэш коммита> - средний сброс коммитов до указанного коммита с отправкой внесенных в них изменений в рабочий каталог.
git reset --hard <хэш коммита> - жесткий сброс коммитов до указанного коммита с их безвозвратным удалением.
git commit --amend -m <новое название коммита> - изменяет название последнего коммита.
git commit --amend --no-edit - добавляет в последний коммит новые изменения.
git reset --merge <хэш коммита> - отменить коммит слияния веток.
git merge --abort - отменить неполучившееся слияние веток из-за возникновения конфликта (возвращает ветки в состояние до merge).
git branch -m <новое название ветки> - переименовывает название ветки.
git branch -d <наименование ветки> - удаляет ветку с указанным наименованием.
